#!/usr/bin/env node

const http = require('http');
const app = require('../app');
const { connectRedis } = require('../utils/cache'); // Import the connect function

// Create HTTP server
const server = http.createServer(app);

async function startServer() {
  try {
    await connectRedis(); // Ensure Redis is connected before starting the server
    const port = normalizePort(process.env.PORT || '3000');
    server.listen(port);
    server.on('error', onError);
    server.on('listening', () => onListening(port));
  } catch (err) {
    console.error('Server failed to start:', err);
    process.exit(1); // Exit if Redis connection fails or any other critical error
  }
}

function normalizePort(val) {
  let port = parseInt(val, 10);
  if (isNaN(port)) {
    return val;
  }
  if (port >= 0) {
    return port;
  }
  return false;
}

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }
  const bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
    default:
      throw error;
  }
}

function onListening(port) {
  const bind = typeof port === 'string' ? 'pipe ' + port : 'port ' + port;
  console.log('Listening on ' + bind);
}

startServer();
